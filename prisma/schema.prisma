generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// MULTI-TENANT MODELS
// ========================================

model Organization {
  id              String   @id @default(cuid())
  name            String
  slug            String   @unique

  // Subscription - Single plan only
  plan            String   @default("STANDARD") // Only STANDARD plan
  isActive        Boolean  @default(true)
  isSuspended     Boolean  @default(false)

  // Access key used for signup
  accessKeyUsed   String?

  // Branding
  logo            String?
  primaryColor    String   @default("#8B5A3C")

  // Relationships
  users           AuthUser[]
  products        Product[]
  orders          Order[]
  categories      Category[]
  shopifyConnections ShopifyConnection[]
  people          People[]
  reports         Report[]
  invoiceSettings InvoiceSettings?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([slug])
  @@index([accessKeyUsed])
}

model AuthUser {
  id              String   @id @default(cuid())
  email           String   @unique
  password        String   // Hashed with bcrypt
  name            String
  avatar          String?

  // Organization
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Role
  role            String   @default("OWNER") // OWNER, ADMIN, MEMBER

  // Security
  emailVerified   Boolean  @default(false)
  lastLoginAt     DateTime?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([organizationId])
  @@index([email])
}

// Super Admin for managing all organizations
model SuperAdmin {
  id              String   @id @default(cuid())
  email           String   @unique
  password        String   // Hashed with bcrypt
  name            String

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([email])
}

// Access keys for signup
model AccessKey {
  id              String   @id @default(cuid())
  key             String   @unique  // The actual access key
  isActive        Boolean  @default(true)
  maxUses         Int?     // null = unlimited
  currentUses     Int      @default(0)
  expiresAt       DateTime?

  // Metadata
  createdBy       String?  // Admin who created it
  notes           String?  // Purpose or description

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([key])
  @@index([isActive])
}

model StockAdjustment {
  id            Int      @id @default(autoincrement())
  productId     Int?
  quantity      Int
  previousStock Int
  newStock      Int
  reason        String
  notes         String?
  adjustedBy    String?
  createdAt     DateTime @default(now())
  product       Product? @relation(fields: [productId], references: [id])
}

model Product {
  id               Int               @id @default(autoincrement())

  // Multi-tenancy
  organizationId   String
  organization     Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  sku              String
  name             String
  categoryId       Int
  stock            Int
  minStock         Int
  location         String
  value            Float
  status           Status            @default(IN_STOCK)
  lastUpdated      DateTime          @updatedAt
  image            String?
  shopifyProductId String?           // Shopify product ID
  shopifyVariantId String?           // Shopify variant ID
  shopifyImageUrl  String?           // Shopify CDN image URL
  syncedFromShopify Boolean          @default(false) // Flag for Shopify products
  orderItems       OrderItem[]
  category         Category          @relation(fields: [categoryId], references: [id])
  stockAdjustments StockAdjustment[]

  @@unique([sku, organizationId])
  @@unique([shopifyProductId, organizationId])
  @@unique([shopifyVariantId, organizationId])
  @@index([organizationId])
  @@index([organizationId, categoryId])
}

model Order {
  id             Int         @id @default(autoincrement())

  // Multi-tenancy
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  orderId        String
  customer       String
  email          String
  phone          String?
  billingAddress String?
  subtotal       Float
  total          Float
  status         String
  priority       String
  dueDate        String
  assignedTo     String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  items          OrderItem[]
  partialPayments PartialPayment[]

  @@unique([orderId, organizationId])
  @@index([organizationId])
  @@index([organizationId, status])
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  sku       String
  name      String
  price     Float
  quantity  Int
  orderId   Int
  productId Int?
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product? @relation(fields: [productId], references: [id])
}

model User {
  id    Int    @id @default(autoincrement())
  name  String
  email String @unique
}

model Category {
  id             Int       @id @default(autoincrement())

  // Multi-tenancy
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@unique([name, organizationId])
  @@index([organizationId])
}

model Report {
  id          Int      @id @default(autoincrement())

  // Multi-tenancy
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  name        String
  description String?
  category    String
  format      String
  filePath    String
  size        Int
  timeRange   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([organizationId])
}

model Profile {
  id         Int      @id @default(autoincrement())
  firstName  String
  lastName   String
  email      String   @unique
  phone      String?
  location   String?
  bio        String?
  department String
  position   String
  employeeId String   @unique
  joinDate   DateTime
  avatar     String?
  password   String?  // Add this line
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model PartialPayment {
  id            Int      @id @default(autoincrement())
  orderId       Int      // FK to Order
  amount        Float    // Partial payment amount
  paymentMethod String?  @default("Cash") // Payment method (Cash, Card, Check, Bank Transfer, etc.)
  paymentDate   DateTime @default(now()) // User can specify the payment date
  paidAt        DateTime @default(now()) // System timestamp when payment was recorded
  notes         String?  // Optional notes about the payment
  order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model People {
  id          Int       @id @default(autoincrement())

  // Multi-tenancy
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  name        String
  email       String
  phone       String?
  department  String?
  position    String?
  status      String    @default("Active")
  hireDate    DateTime?
  performance String?
  type        String
  company     String?
  address     String?
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([email, organizationId])
  @@index([organizationId])
}

model InvoiceSettings {
  id              Int      @id @default(autoincrement())

  // Multi-tenancy
  organizationId  String   @unique
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  companyName     String   @default("Your Company")
  companyEmail    String?
  companyPhone    String?
  companyAddress  String?
  logo            String?  // Base64 encoded logo
  primaryColor    String   @default("#8B5A3C") // Default brown color
  secondaryColor  String   @default("#F5F5F5") // Default light gray
  textColor       String   @default("#FFFFFF") // Default white text
  invoiceComments String?  @default("Thank you for your business! Please remit payment within 30 days of invoice date. Late payments may be subject to fees.") // Invoice footer comments
  paymentMethods  String?  @default("Bank Transfer: [Account Details]\nPayPal: payment@company.com\nCheck: Make payable to Company Name") // Payment methods text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("invoice_settings")
  @@index([organizationId])
}


model ShopifyConnection {
  id           Int       @id @default(autoincrement())

  // Multi-tenancy (one per organization)
  organizationId String   @unique
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  shopDomain   String    // e.g., your-store.myshopify.com
  apiKey       String?
  apiSecret    String?
  accessToken  String    // Admin API access token
  isConnected  Boolean   @default(true)
  lastSyncAt   DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([organizationId])
}

enum Status {
  IN_STOCK
  LOW_STOCK
  OUT_OF_STOCK
}
